(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'admin'"
p3
sS'layer'
p4
S'/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/applications/feedback/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\n#@auth.requires_membership(\'admin\')\n\ndef display_users():\n    list = db(db.auth_user).select()\n    return locals()\n\ndef show_user():\n    user_id = request.args(0,cast=int)\n    #print user_id\n    user_detail = db(db.auth_user.id==user_id).select()\n    tp=db.executesql("SELECT group_id FROM auth_membership WHERE user_id=\'%d\'" % (int(user_id)))\n    #print tp[0][0]\n    return locals()\n\ndef home_admin():\n    form1=SQLFORM(db.sets_table).process()\n    form2=SQLFORM(db.set_question).process()\n    form3=SQLFORM(db.specificQuestion_course).process()\n    return locals()\n\ndef feedback():\n    list = db(db.set_question).select()\n    form = SQLFORM(list[0])\n    for i in list[1:]:\n        temp2 = SQLFORM(i)\n        form.append(temp2)\n    return locals()\n\ndef make_faculty():\n    user_id = request.args(0,cast=int)\n    #user = db.auth_user[user_id]\n    # db.executesql("UPDATE auth_membership SET group_id=\'%d\' WHERE id=\'%d\'" % (1,int(user_id)))\n    #id = db.auth_membership.insert(group_id=1,user_id=user_id)\n    auth.add_membership(8,user_id)\n    auth.del_membership(9,user_id)\n    redirect(URL(\'show_user\',args=user_id))\n\n\n@auth.requires_login()\ndef test2():\n    list = db(db.set_question).select()\n    formList = []\n    for que in list:\n        form = FORM(que.question,BR(),\n                    INPUT(_type="radio", _name=que.id, _id=str(que.id)+"A", _value="A"),que.option_A,BR(),\n                    INPUT(_type="radio", _name=que.id, _id=str(que.id)+"B", _value="B"),que.option_B,BR(),\n                    INPUT(_type="radio", _name=que.id, _id=str(que.id)+"C", _value="C"),que.option_C,BR(),\n                    INPUT(_type="radio", _name=que.id, _id=str(que.id)+"D", _value="D"),que.option_D,BR(),\n                    INPUT(_type="radio", _name=que.id, _id=str(que.id)+"E", _value="E"),que.option_E,BR()\n                   )\n        formList.append(form)\n    return dict(formList=formList, list=list)\n\ndef storeAns():\n    db.answers_table.insert(course_id=1, student_id=auth.user.id, question_id=request.vars.id, answer=request.vars.id2)\n    return "bla"\n\n@auth.requires_login()\ndef index():\n    if(auth.has_membership(auth.user.id, \'admin\')):\n        redirect(URL(\'default\',\'home_admin\'))\n    elif(auth.has_membership(auth.user.id, \'faculty\')):\n        redirect(URL(\'default\',\'home_faculty\'))\n    else:\n        redirect(URL(\'default\',\'home_student\'))\n    return locals()\n\ndef __add_user_membership(form):\n         #group_id = auth.id_group(role=form.vars.user_type)\n         #user_id = form.vars.id\n         auth.add_membership(9,auth.user_id)\n\ndef user():\n    auth.settings.register_onaccept = __add_user_membership\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/applications/feedback/controllers/default.py", line 120, in <module>\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/tools.py", line 4236, in f\n    return action(*a, **b)\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/applications/feedback/controllers/default.py", line 70, in index\n    if(auth.has_membership(auth.user.id, \'admin\')):\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/tools.py", line 4363, in has_membership\n    & (membership.group_id == group_id)).select():\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/packages/dal/pydal/objects.py", line 2025, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 124, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1280, in select\n    sql = self._select(query, fields, attributes)\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1167, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/media/krishn/New Volume/Academics UG1.2/ITWS-2/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1439, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'admin\'\n'
p11
s.